apply plugin: 'maven-publish'
apply plugin: 'signing'
apply from: "$rootDir/gradle/sonatype-central.gradle"

java {
    withSourcesJar()
    withJavadocJar()
}

// Task to publish to local repository for bundle creation
tasks.register("publishToLocalMaven", Task) {
    dependsOn "publishMavenPublicationToLocalRepository"
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            pom {
                name = 'Dexmaker'
                description = project.description
                url = 'https://github.com/linkedin/dexmaker'
                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'com.linkedin'
                        name = 'LinkedIn Corp'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/linkedin/dexmaker.git'
                    developerConnection = 'scm:git:ssh://github.com:linkedin/dexmaker.git'
                    url = 'https://github.com/linkedin/dexmaker/tree/main'
                }
            }

            repositories {
                def sonatypeUsername = System.getenv("SONATYPE_USER")
                def sonatypePassword = System.getenv("SONATYPE_PASSWORD")
<<<<<<< HEAD
                maven {
                    name = "centralSnapshot"
                    url = "https://central.sonatype.com/api/v1/publisher/snapshots"
                    credentials {
                        username = sonatypeUsername
                        password = sonatypePassword
                    }
                }
=======

                // Local Maven repository for local development
                mavenLocal()

                // Note: Sonatype Central Portal snapshots are published via API, not Maven repository
                // The publishSnapshotToCentral task handles the API-based upload
>>>>>>> 9f7318e (Update release scripts.)
            }
        }
    }
}

// DEXMAKER_GPG_PRIVATE_KEY should contain the armoured private key that
// starts with -----BEGIN PGP PRIVATE KEY BLOCK-----
// It can be obtained with gpg --armour --export-secret-keys KEY_ID
def signingKey = System.getenv("DEXMAKER_GPG_PRIVATE_KEY")
def signingPassword = System.getenv("DEXMAKER_GPG_PRIVATE_KEY_PASSWORD")
signing {
    required { signingKey != null && signingPassword != null }
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.maven
}
